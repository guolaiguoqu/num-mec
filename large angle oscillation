#column: come last, row: second last for general dimensions
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy.integrate import odeint #import odeint
def model(y,t):
    g=9.8
    l=0.1
    w=np.sqrt(g/l)
    #  A= ([0,1]
    #     [-w**2*np.sin(theta),0])
    #  dydt=A*y
    #dydt=[0]*2 
    # np.arange(2,9,2) #start,end step size.    returns array

    dydt=np.zeros(2)
    dydt[0]=y[1]
    dydt[1]=-w**2*np.sin(y[0])
    return dydt
g=9.8
l=0.1
w=np.sqrt(g/l)
t=np.linspace(0,20,200) #start, end, number of elements
theta0=np.pi/6
y0=np.array([theta0,0]) #
solution=odeint(model,y0,t)
#print(solution)
#theta=solution[1,:]
theta=solution[:,0] #time proceeds in columns #python index starts with zero
#print(theta)
thetasho=theta0*np.cos(w*t)
plt.plot(t,theta,'r-',t,thetasho,'b-')
plt.legend('real solution','harmonic solution')
#plt.legend('real solution')
#plt.legend('harmonic solution')
plt.xlabel('t')
plt.ylabel('theta')
plt.savefig('numeric problem 1')
plt.show()
'''
plt.plot(t,theta-thetasho)
plt.xlabel('t')
plt.ylabel('deltatheta')
plt.savefig('difference in solutions')
plt.show()
'''
plt.plot(t,theta+thetasho)
plt.xlabel('t')
plt.ylabel('sumtheta')
plt.savefig('sum of solutions')
plt.show()
